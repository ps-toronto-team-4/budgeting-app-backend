type User {
    username: String!
    email: String!
    firstName: String!
    lastName: String!
    phoneNumber: String
}

type Category {
    id: Int
    name: String
    colourHex: String
    description: String
}

type Merchant {
    id: Int
    name: String
    description: String
    defaultCategory: Category
}

type Query {
    expense(passwordHash: String!, id: Int!): ExpensePayload!
    expenses(passwordHash: String!): ExpensesPayload!
    greeting: String!
    category(passwordHash: String!, id: Int!): CategoryPayload!
    categories(passwordHash: String!): CategoriesPayload!
    user(username: String!): User ## Helper for testing.
    signIn(username: String!, password: String!): SignInPayload!
    merchant(passwordHash: String!, id: Int!): MerchantPayload
    merchants(passwordHash: String!): MerchantsPayload
}

type Mutation {
    signUp(
        username: String!,
        password: String!,
        email: String!,
        firstName: String!,
        lastName: String!,
        phoneNumber: String): CreateUserPayload!
    deleteUser(passwordHash: String!): DeleteUserPayload!
    createCategory(passwordHash: String!, name: String!, colourHex: String!, description: String): CategoryPayload!
    updateCategory(passwordHash: String!, id:Int!, name: String!, colourHex: String!, description: String): CategoryPayload!
    deleteCategory(passwordHash:String!, id:Int!): DeleteCategoryPayload!
    createMerchant(passwordHash: String!, name: String!, description: String, defaultCategoryId: Int): MerchantPayload!
    updateMerchant(passwordHash: String!, id:Int!, name: String!, description: String, defaultCategoryId: Int): MerchantPayload!
    deleteMerchant(passwordHash:String!, id:Int!): DeleteMerchantPayload!
    createExpense(passwordHash: String!, title: String!, description: String, amount: Float!, epochDate: Int, categoryId: Int, merchantId: Int): ExpensePayload!
    deleteExpense(passwordHash: String!, title: String!, description: String, amount: Float!, epochDate: Int, categoryId: Int, merchantId: Int): ExpensePayload!
}

type FailurePayload {
    exceptionName: String
    errorMessage: String
}

type DeleteSuccess {
    successMessage: String
}

union CreateUserPayload = CreateUserSuccess | FailurePayload

type CreateUserSuccess {
    passwordHash: String!
    user: User!
}

union SignInPayload = SignInSuccess | FailurePayload

type SignInSuccess {
    passwordHash: String!
}

union DeleteUserPayload = DeleteSuccess | FailurePayload

union CategoryPayload = CategorySuccess | FailurePayload

type CategorySuccess {
    category: Category!
}

union CategoriesPayload = CategoriesSuccess | FailurePayload

type CategoriesSuccess {
    categories: [Category]!
}

union DeleteCategoryPayload = DeleteSuccess | FailurePayload

type Expense {
	amount: Float
	title: String
	description: String
	user: User
	category: Category
	merchant: Merchant
}

union ExpensePayload = ExpenseSuccess | FailurePayload
union ExpensesPayload = ExpensesSuccess | FailurePayload

type ExpenseSuccess {
    expense: Expense!
}

type ExpensesSuccess {
    expenses: [Expense]!
}

union MerchantPayload = MerchantSuccess | FailurePayload

type MerchantSuccess {
    merchant: Merchant!
}

union MerchantsPayload = MerchantsSuccess | FailurePayload

type MerchantsSuccess {
    merchants: [Merchant]!
}

union DeleteMerchantPayload = DeleteSuccess | FailurePayload
