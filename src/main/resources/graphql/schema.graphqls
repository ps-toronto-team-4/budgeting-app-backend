type User {
    username: String!
    email: String!
    firstName: String!
    lastName: String!
    phoneNumber: String
}

type Category {
    id: Int
    name: String
    colourHex: String
    description: String
}

type Merchant {
    id: Int
    name: String
    description: String
    defaultCategory: Category
}

type Query {
    expense(passwordHash: String!, id: Int!): ExpensePayload!
    expenses(passwordHash: String!): ExpensesPayload!
    greeting: String!
    category(passwordHash: String!, id: Int!): CategoryPayload!
    categories(passwordHash: String!): CategoriesPayload!
    user(username: String!): User ## Helper for testing.
    signIn(username: String!, password: String!): SignInPayload!
    merchant(passwordHash: String!, id: Int!): MerchantPayload!
    merchants(passwordHash: String!): MerchantsPayload!
    budget(passwordHash:String!, id: Int!): BudgetPayload!
    budgets(passwordHash:String!): BudgetsPayload!
    budgetCategory(passwordHash:String!, id:Int!): BudgetCategoryPayload!
    budgetCategories(passwordHash:String!, budgetId:Int!): BudgetCategoriesPayload!
}

type Expense {
    id: Int!
    amount: Float!
    description: String
    date: String!
    user: User!
    category: Category
    merchant: Merchant
}

type Budget {
    id: Int!
    month: Int!
    year: Int!
    user: User!
}

type BudgetCategory {
    id: Int!
    budget: Budget!
    category: Category!
    amount: Float!
    user: User!
}

type Mutation {
    signUp(
        username: String!,
        password: String!,
        email: String!,
        firstName: String!,
        lastName: String!,
        phoneNumber: String): CreateUserPayload!
    deleteUser(passwordHash: String!): DeleteUserPayload!
    createCategory(passwordHash: String!, name: String!, colourHex: String!, description: String): CategoryPayload!
    updateCategory(passwordHash: String!, id:Int!, name: String!, colourHex: String!, description: String): CategoryPayload!
    deleteCategory(passwordHash:String!, id:Int!): DeleteCategoryPayload!
    createMerchant(passwordHash: String!, name: String!, description: String, defaultCategoryId: Int): MerchantPayload!
    updateMerchant(passwordHash: String!, id:Int!, name: String!, description: String, defaultCategoryId: Int): MerchantPayload!
    deleteMerchant(passwordHash:String!, id:Int!): DeleteMerchantPayload!
    createExpense(passwordHash: String!, description: String, amount: Float!, epochDate: Int!, categoryId: Int, merchantId: Int): ExpensePayload!
    updateExpense(passwordHash: String!, id: Int!, description: String, amount: Float!, epochDate: Int!, categoryId: Int, merchantId: Int): ExpensePayload!
    deleteExpense(passwordHash: String!, id: Int!): DeletePayload!
    createBudget(passwordHash:String!, month:Int!, year:Int!): BudgetPayload!
    deleteBudget(passwordHash: String!, id: Int!): DeletePayload!
    createBudgetCategory(passwordHash: String!, amount: Float!, categoryId: Int, budgetId: Int): BudgetCategoryPayload!
    updateBudgetCategory(passwordHash: String!, id:Int!, amount: Float!): BudgetCategoryPayload!
    deleteBudgetCategory(passwordHash: String!, id: Int!): DeletePayload!
}

type FailurePayload {
    exceptionName: String
    errorMessage: String
}

type DeleteSuccess {
    successMessage: String
}

union CreateUserPayload = CreateUserSuccess | FailurePayload

type CreateUserSuccess {
    passwordHash: String!
    user: User!
}

union SignInPayload = SignInSuccess | FailurePayload

type SignInSuccess {
    passwordHash: String!
}

union DeleteUserPayload = DeleteSuccess | FailurePayload

union CategoryPayload = CategorySuccess | FailurePayload

type CategorySuccess {
    category: Category!
}

union CategoriesPayload = CategoriesSuccess | FailurePayload

type CategoriesSuccess {
    categories: [Category]!
}

union DeleteCategoryPayload = DeleteSuccess | FailurePayload

union ExpensePayload = ExpenseSuccess | FailurePayload
union ExpensesPayload = ExpensesSuccess | FailurePayload

type ExpenseSuccess {
    expense: Expense!
}

type ExpensesSuccess {
    expenses: [Expense]!
}

union MerchantPayload = MerchantSuccess | FailurePayload

type MerchantSuccess {
    merchant: Merchant!
}

union MerchantsPayload = MerchantsSuccess | FailurePayload

type MerchantsSuccess {
    merchants: [Merchant]!
}

union DeleteMerchantPayload = DeleteSuccess | FailurePayload

union DeletePayload = DeleteSuccess | FailurePayload

union BudgetPayload = BudgetSuccess | FailurePayload

type BudgetSuccess {
    budget: Budget!
}

union BudgetsPayload = BudgetsSuccess | FailurePayload

type BudgetsSuccess {
    budgets: [Budget!]!
}

union BudgetCategoryPayload = BudgetCategorySuccess | FailurePayload

type BudgetCategorySuccess {
    budgetCategory: BudgetCategory!
}

union BudgetCategoriesPayload = BudgetCategoriesSuccess | FailurePayload

type BudgetCategoriesSuccess {
    budgetCategories: [BudgetCategory!]!
}
